#!/usr/bin/env groovy

/*
 * This Jenkinsfile is intended to run on https://ci.evernym.com and may fail anywhere else.
 *
 * Environment requirements:
 *  - environment variable:
 *      - INDY_AGENT_LINUX_DOCKER_LABEL: label for agents with ability
 *          to run linux docker containers
 *      - (optional) INDY_AGENT_WINDOWS_LABEL: label for windows agents
 *  - agents:
 *      - linux:
 *          - docker
 *      - windows:
 *          - python3.5 + virtualenv
 *          - cygwin
 */

name = 'indy-node'

library identifier: 'indy@feature/INDY-997_public-lib', retriever: modernSCM(
    github(credentialsId: 'evernym-github-machine-user', repoOwner: 'evernym', repository: 'jenkins-shared')
)


config = [
    staticVerify: true,
    runTests: true,
    failFast: false,
    sendNotif: false
]

env.DRY_RUN = "Y"


// TODO enable windows
labels = [
    linux: env.INDY_AGENT_LINUX_DOCKER_LABEL ?: 'linux'
]

if (env.INDY_AGENT_WINDOWS_LABEL) {
    labels[windows] = env.INDY_AGENT_WINDOWS_LABEL
}

dockers = [
    ubuntu: [
        imgName: "hyperledger/indy-node-ci",
        dockerfile: "ci/ubuntu.dockerfile",
        contextDir: "ci"
    ]
]

tests = [
    common: [
        resFile: { "test-result-common.${NODE_NAME}.xml" },
        testDir: 'indy_common',
        docker: 'ubuntu'
    ],
    client: [
        resFile: { "test-result-client.${NODE_NAME}.txt" },
        testDir: 'indy_client',
        useRunner: true,
        docker: 'ubuntu'
    ],
    node: [
        resFile: { "test-result-node.${NODE_NAME}.txt" },
        testDir: 'indy_node',
        useRunner: true,
        docker: 'ubuntu'
    ]
].collect {k, v -> [k, v]}


def buildDebUbuntu = { releaseVersion, sourcePath ->
    def volumeName = "$name-deb-u1604"
    if (env.BRANCH_NAME && env.BRANCH_NAME != 'master') {
        volumeName = "${volumeName}.${env.BRANCH_NAME}"
    }
    if (sh(script: "docker volume ls -q | grep -q '^$volumeName\$'", returnStatus: true) == 0) {
        sh "docker volume rm $volumeName"
    }
    dir('build-scripts/ubuntu-1604') {
        sh "./build-$name-docker.sh \"$sourcePath\" $releaseVersion $volumeName"
        sh "./build-3rd-parties-docker.sh $volumeName"
    }
    return "$volumeName"
}


// PIPELINE

try {
    timeout(60) {

        def releaseVersion = getReleaseVersion {
            node = 'ubuntu-master'
        }

        _publishToGitHub {
            node = this.labels.linux
            version = releaseVersion
            credentialsId = 'id_rsa.evernym-ci' // TODO from env
            versionPostfix = 'testtt'
        }

        _publishToPypi {
            node = this.labels.linux
            version = releaseVersion
            credentialsId = 'pypi_credentials' // TODO from env
        }

        packaging {
            node = this.labels.linux
            builders.deb = buildDebUbuntu
            version = releaseVersion
        }

        autoMerge {
            node = this.labels.linux
            credentialsId = 'evernym-github-machine-user-token' //TODO from env
        }

        isTested {
            node = this.labels.linux
            branch = 'master'
        }

        if (config.staticVerify) {
            verifyStatic {
                dockerEnv = [
                    imgName: "code-validation",
                    dockerfile: "ci/code-validation.dockerfile",
                    contextDir: "ci"
                ]
                nodeLabel = this.labels.linux
            }
        }
        if (config.runTests) {
            verify {
                labels = this.labels
                dockers = this.dockers
                tests = this.tests
                failFast = this.config.failFast
            }
        }
        currentBuild.result = 'SUCCESS'
    }
} catch (Exception err) {
    println(err.toString())
    currentBuild.result = 'FAILURE'
} finally {
    stage('Build result notification') {
        if (config.sendNotif) {
            def emailMessage = [
                body: '$DEFAULT_CONTENT',
                replyTo: '$DEFAULT_REPLYTO',
                subject: '$DEFAULT_SUBJECT',
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']]
            ]
            emailext emailMessage
        }
    }
}
